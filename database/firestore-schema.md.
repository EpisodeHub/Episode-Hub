## Firestore Schema
// Firestore Schema

// Users Collection
users (collection)
  - userId (document ID)
    - email (string)
    - adWatchCount (number)
    - unlockedBlocks (map)
      - storyId (array of block indexes)
    - bookmarks (array of storyIds)
    - readingProgress (map)
      - storyId (episode index)
    - ratings (map)
      - storyId (rating)

// Stories Collection
stories (collection)
  - storyId (document ID)
    - title (string)
    - description (string)
    - author (string)
    - tags (array of strings)
    - blocks (array of blockIds)

// Blocks Collection
blocks (collection)
  - blockId (document ID)
    - storyId (reference)
    - episodes (array of episodeIds)
    - images (array of image URLs)

// Episodes Collection
episodes (collection)
  - episodeId (document ID)
    - blockId (reference)
    - title (string)
    - content (string)
    - cliffhanger (boolean)

// Firestore Data Model (JSON representation)
const userSchema = {
  email: "",
  adWatchCount: 0,
  unlockedBlocks: {},
  bookmarks: [],
  readingProgress: {},
  ratings: {}
};

const storySchema = {
  title: "",
  description: "",
  author: "",
  tags: [],
  blocks: []
};

const blockSchema = {
  storyId: "",
  episodes: [],
  images: []
};

const episodeSchema = {
  blockId: "",
  title: "",
  content: "",
  cliffhanger: false
};

// Firestore Security Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    match /stories/{storyId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true;
    }
    
    match /blocks/{blockId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true;
    }
    
    match /episodes/{episodeId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true;
    }
  }
}
